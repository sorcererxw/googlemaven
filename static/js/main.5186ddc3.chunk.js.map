{"version":3,"sources":["api/index.js","container/HomePage.js","container/WhatsNewPage.js","App.js","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","timeout","TreeNode","Tree","HomePage","state","data","_this2","this","get","then","res","setState","catch","err","console","log","react_default","a","createElement","tree","map","group","title","name","artifact","version","date","Component","WhatsNewPage","toDependency","mavenPackage","concat","sort","b","newList","i","length","moment","diff","push","calendar","App","style","padding","marginRight","Link","to","Switch","Route","exact","path","component","render","Redirect","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5186ddc3.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst client = axios.create({\r\n    baseURL: '/api',\r\n    timeout: 100000,\r\n})\r\n\r\nexport function getPackageList() {\r\n    return client.get('/package')\r\n}\r\n\r\nexport function getFullGroup() {\r\n    return client.get(`/group?full=true`)\r\n}\r\n\r\nexport function getGroups() {\r\n    return client.get(`/group`)\r\n}\r\n\r\nexport function getArtifacts(group) {\r\n    return client.get(`/${group}`)\r\n}\r\n\r\nexport function getByGroupAndArtifact(group, Artifacts) {\r\n    return client.get(`/${group}/${Artifacts}`)\r\n}\r\n","import React, {Component} from 'react'\r\nimport * as api from '../api'\r\nimport {Tree} from 'antd'\r\n\r\nconst {TreeNode} = Tree\r\n\r\nclass HomePage extends Component {\r\n    state = {\r\n        data: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        api.getFullGroup().then(res => {\r\n            this.setState({data: res.data})\r\n        }).catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Google Maven</h1>\r\n                <Tree>\r\n                    {this.state.data.map(group =>\r\n                        <TreeNode title={group.name}>{\r\n                            group.artifact.map(artifact =>\r\n                                <TreeNode title={artifact.name}>{\r\n                                    artifact.version.map(version =>\r\n                                        <TreeNode title={version.name}>\r\n                                            <code>{version.date}</code>\r\n                                        </TreeNode>\r\n                                    )\r\n                                }</TreeNode>\r\n                            )\r\n                        }</TreeNode>\r\n                    )}\r\n                </Tree>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage","import React, {Component} from 'react'\r\nimport * as api from '../api'\r\nimport moment from \"moment\"\r\n\r\nclass WhatsNewPage extends Component {\r\n    state = {\r\n        data: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        api.getPackageList().then(res => {\r\n            this.setState({data: res.data.sort((a, b) => a.date - b.date)})\r\n        }).catch(err => console.log(err))\r\n    }\r\n\r\n    toDependency = (mavenPackage) => {\r\n        return `${mavenPackage.group}:${mavenPackage.artifact}:${mavenPackage.version}`\r\n    }\r\n\r\n    render() {\r\n        const newList = []\r\n        for (let i = 0; i < this.state.data.length; i++) {\r\n            if (i === 0 || moment(this.state.data[i].date).diff(moment(this.state.data[i - 1].date), 'days') !== 0) {\r\n                newList.push(<h2>{moment(this.state.data[i].date).calendar()}</h2>)\r\n            }\r\n            newList.push(\r\n                <div>\r\n                    <code>{this.toDependency(this.state.data[i])}</code>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>What's New</h1>\r\n                {newList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WhatsNewPage","import React, {Component} from 'react'\nimport HomePage from \"./container/HomePage\"\nimport {Route, Switch, Redirect, Link} from \"react-router-dom\"\nimport WhatsNewPage from \"./container/WhatsNewPage\"\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <div style={{padding: 16}}>\n                    <span style={{marginRight: 16}}><Link to={\"/\"}>Home</Link></span>\n                    <span style={{marginRight: 16}}><Link to={\"/new\"}>What's New</Link></span>\n                </div>\n\n                <div style={{padding: 16}}>\n                    <Switch>\n                        <Route exact path={\"/\"} component={HomePage}/>\n                        <Route exact path={\"/new\"} component={WhatsNewPage}/>\n                        <Route render={() => <Redirect to={\"/\"}/>}/>\n                    </Switch>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {BrowserRouter} from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}